\hypertarget{main_8cpp}{}\section{main.\+cpp File Reference}
\label{main_8cpp}\index{main.\+cpp@{main.\+cpp}}
{\ttfamily \#include \char`\"{}Semaphore.\+h\char`\"{}}\newline
{\ttfamily \#include $<$iostream$>$}\newline
{\ttfamily \#include $<$thread$>$}\newline
{\ttfamily \#include $<$chrono$>$}\newline
Include dependency graph for main.\+cpp\+:
% FIG 0
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
void \hyperlink{main_8cpp_a9141e3eb0b1274e58b053fd8a60a94e3}{task\+One} (std\+::shared\+\_\+ptr$<$ \hyperlink{class_semaphore}{Semaphore} $>$ first\+Sem, std\+::shared\+\_\+ptr$<$ \hyperlink{class_semaphore}{Semaphore} $>$ second\+Sem, int delay)
\begin{DoxyCompactList}\small\item\em An Implementation of a Rendezvous using Semaphores Uses C++11 features such as mutex and condition variables to implement an example of a rendezvous for threads. \end{DoxyCompactList}\item 
void \hyperlink{main_8cpp_ac7cb6b39082835c7e3c853c42af9ecdc}{task\+Two} (std\+::shared\+\_\+ptr$<$ \hyperlink{class_semaphore}{Semaphore} $>$ first\+Sem, std\+::shared\+\_\+ptr$<$ \hyperlink{class_semaphore}{Semaphore} $>$ second\+Sem, int delay)
\begin{DoxyCompactList}\small\item\em displays a message that is split in to 2 sections to show how a rendezvous works. The second task arrives and sends a wait to the thread stopping if from continuing. Then it receives a signal from the other thread and is released. \end{DoxyCompactList}\item 
int \hyperlink{main_8cpp_a840291bc02cba5474a4cb46a9b9566fe}{main} (void)
\end{DoxyCompactItemize}


\subsection{Function Documentation}
\mbox{\Hypertarget{main_8cpp_a840291bc02cba5474a4cb46a9b9566fe}\label{main_8cpp_a840291bc02cba5474a4cb46a9b9566fe}} 
\index{main.\+cpp@{main.\+cpp}!main@{main}}
\index{main@{main}!main.\+cpp@{main.\+cpp}}
\subsubsection{\texorpdfstring{main()}{main()}}
{\footnotesize\ttfamily int main (\begin{DoxyParamCaption}\item[{void}]{ }\end{DoxyParamCaption})}

$<$ Launch the threads \mbox{\Hypertarget{main_8cpp_a9141e3eb0b1274e58b053fd8a60a94e3}\label{main_8cpp_a9141e3eb0b1274e58b053fd8a60a94e3}} 
\index{main.\+cpp@{main.\+cpp}!task\+One@{task\+One}}
\index{task\+One@{task\+One}!main.\+cpp@{main.\+cpp}}
\subsubsection{\texorpdfstring{task\+One()}{taskOne()}}
{\footnotesize\ttfamily void task\+One (\begin{DoxyParamCaption}\item[{std\+::shared\+\_\+ptr$<$ \hyperlink{class_semaphore}{Semaphore} $>$}]{first\+Sem,  }\item[{std\+::shared\+\_\+ptr$<$ \hyperlink{class_semaphore}{Semaphore} $>$}]{second\+Sem,  }\item[{int}]{delay }\end{DoxyParamCaption})}



An Implementation of a Rendezvous using Semaphores Uses C++11 features such as mutex and condition variables to implement an example of a rendezvous for threads. 

displays a message that is split in to 2 sections to show how a rendezvous works The first task arrives and sends a signal allowing the second task to continue. \mbox{\Hypertarget{main_8cpp_ac7cb6b39082835c7e3c853c42af9ecdc}\label{main_8cpp_ac7cb6b39082835c7e3c853c42af9ecdc}} 
\index{main.\+cpp@{main.\+cpp}!task\+Two@{task\+Two}}
\index{task\+Two@{task\+Two}!main.\+cpp@{main.\+cpp}}
\subsubsection{\texorpdfstring{task\+Two()}{taskTwo()}}
{\footnotesize\ttfamily void task\+Two (\begin{DoxyParamCaption}\item[{std\+::shared\+\_\+ptr$<$ \hyperlink{class_semaphore}{Semaphore} $>$}]{first\+Sem,  }\item[{std\+::shared\+\_\+ptr$<$ \hyperlink{class_semaphore}{Semaphore} $>$}]{second\+Sem,  }\item[{int}]{delay }\end{DoxyParamCaption})}



displays a message that is split in to 2 sections to show how a rendezvous works. The second task arrives and sends a wait to the thread stopping if from continuing. Then it receives a signal from the other thread and is released. 

